# Global logging configuration - 전역 리포팅 레벨 설정
log4j.rootLogger=INFO, stdout, logfile

# Console output.. - 콘솔 appender 설정
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %l: %m%n

# File output - 파일 appender 설정
log4j.appender.logfile=org.apache.log4j.RollingFileAppender
log4j.appender.logfile.File=C:/logs.log
log4j.appender.logfile.MaxFileSize=50MB
log4j.appender.logfile.MaxBackupIndex=10
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d %l: %m%n

# SqlMap logging configuration... - SqlMap 리포팅 레벨 설정
log4j.logger.com.ibatis=DEBUG 
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG 
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG 
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG 
log4j.logger.java.sql.Connection=DEBUG 
log4j.logger.java.sql.Statement=DEBUG 
log4j.logger.java.sql.PreparedStatement=DEBUG 
log4j.logger.java.sql.ResultSet= 


# Log Level
# TRACE : 가장 상세한 정보를 나타낼 때 사용한다.
# DEBUG : 일반 정보를 상세히 나타낼 때 사용한다.
# INFO  : 일반 정보를 나타낼 때 사용한다.
# WARN  : 에러는 아니지만 주의할 필요가 있을 때 사용한다.
# ERROR : 일반 에러가 일어 났을 때 사용한다.
# FATAL : 가장 크리티컬한 에러가 일어 났을 때 사용한다.

# Options
# %d : 로깅 이벤트가 일어난 날자(date)
# %p : 로깅 이벤트의 priority
# %t : 로깅 이벤트를 생성한 스레드 이름
# %c : 로깅 이벤트의 category
# %F : 로깅요청을 일으킨 파일 이름
# %L : 로깅요청을 일으킨 파일의 행번호
# %x : 로깅이벤트를 발생시킨 스레드에 관련된 내포검사항목
#      (Nested Diagnostic Context : NDC)을 출력
# %C : 로깅요청을 일으킨 호출자의 완전한 클래스이름
# %M : 로깅요청을 일으킨 메소드
# %m : 메세지
# %n : 플랫폼 독립적인 개행문자
# %l : 소스코드의 위치정보를 출력한다. %C. %M(%F:%L) 의 축약형